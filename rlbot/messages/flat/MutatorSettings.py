# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flat

import flatbuffers

class MutatorSettings(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMutatorSettings(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MutatorSettings()
        x.Init(buf, n + offset)
        return x

    # MutatorSettings
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MutatorSettings
    def MatchLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # MutatorSettings
    def MaxScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # MutatorSettings
    def OvertimeOption(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # MutatorSettings
    def SeriesLengthOption(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # MutatorSettings
    def GameSpeedOption(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # MutatorSettings
    def BallMaxSpeedOption(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # MutatorSettings
    def BallTypeOption(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # MutatorSettings
    def BallWeightOption(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # MutatorSettings
    def BallSizeOption(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # MutatorSettings
    def BallBouncinessOption(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # MutatorSettings
    def BoostOption(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # MutatorSettings
    def RumbleOption(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # MutatorSettings
    def BoostStrengthOption(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # MutatorSettings
    def GravityOption(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # MutatorSettings
    def DemolishOption(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # MutatorSettings
    def RespawnTimeOption(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def MutatorSettingsStart(builder): builder.StartObject(16)
def MutatorSettingsAddMatchLength(builder, matchLength): builder.PrependInt8Slot(0, matchLength, 0)
def MutatorSettingsAddMaxScore(builder, maxScore): builder.PrependInt8Slot(1, maxScore, 0)
def MutatorSettingsAddOvertimeOption(builder, overtimeOption): builder.PrependInt8Slot(2, overtimeOption, 0)
def MutatorSettingsAddSeriesLengthOption(builder, seriesLengthOption): builder.PrependInt8Slot(3, seriesLengthOption, 0)
def MutatorSettingsAddGameSpeedOption(builder, gameSpeedOption): builder.PrependInt8Slot(4, gameSpeedOption, 0)
def MutatorSettingsAddBallMaxSpeedOption(builder, ballMaxSpeedOption): builder.PrependInt8Slot(5, ballMaxSpeedOption, 0)
def MutatorSettingsAddBallTypeOption(builder, ballTypeOption): builder.PrependInt8Slot(6, ballTypeOption, 0)
def MutatorSettingsAddBallWeightOption(builder, ballWeightOption): builder.PrependInt8Slot(7, ballWeightOption, 0)
def MutatorSettingsAddBallSizeOption(builder, ballSizeOption): builder.PrependInt8Slot(8, ballSizeOption, 0)
def MutatorSettingsAddBallBouncinessOption(builder, ballBouncinessOption): builder.PrependInt8Slot(9, ballBouncinessOption, 0)
def MutatorSettingsAddBoostOption(builder, boostOption): builder.PrependInt8Slot(10, boostOption, 0)
def MutatorSettingsAddRumbleOption(builder, rumbleOption): builder.PrependInt8Slot(11, rumbleOption, 0)
def MutatorSettingsAddBoostStrengthOption(builder, boostStrengthOption): builder.PrependInt8Slot(12, boostStrengthOption, 0)
def MutatorSettingsAddGravityOption(builder, gravityOption): builder.PrependInt8Slot(13, gravityOption, 0)
def MutatorSettingsAddDemolishOption(builder, demolishOption): builder.PrependInt8Slot(14, demolishOption, 0)
def MutatorSettingsAddRespawnTimeOption(builder, respawnTimeOption): builder.PrependInt8Slot(15, respawnTimeOption, 0)
def MutatorSettingsEnd(builder): return builder.EndObject()
