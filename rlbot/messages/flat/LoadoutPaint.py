# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flat

import flatbuffers

# /// Specification for 'painted' items. See https://github.com/RLBot/RLBot/wiki/Bot-Customization
class LoadoutPaint(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsLoadoutPaint(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LoadoutPaint()
        x.Init(buf, n + offset)
        return x

    # LoadoutPaint
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LoadoutPaint
    def CarPaintId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LoadoutPaint
    def DecalPaintId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LoadoutPaint
    def WheelsPaintId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LoadoutPaint
    def BoostPaintId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LoadoutPaint
    def AntennaPaintId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LoadoutPaint
    def HatPaintId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LoadoutPaint
    def TrailsPaintId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LoadoutPaint
    def GoalExplosionPaintId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def LoadoutPaintStart(builder): builder.StartObject(8)
def LoadoutPaintAddCarPaintId(builder, carPaintId): builder.PrependInt32Slot(0, carPaintId, 0)
def LoadoutPaintAddDecalPaintId(builder, decalPaintId): builder.PrependInt32Slot(1, decalPaintId, 0)
def LoadoutPaintAddWheelsPaintId(builder, wheelsPaintId): builder.PrependInt32Slot(2, wheelsPaintId, 0)
def LoadoutPaintAddBoostPaintId(builder, boostPaintId): builder.PrependInt32Slot(3, boostPaintId, 0)
def LoadoutPaintAddAntennaPaintId(builder, antennaPaintId): builder.PrependInt32Slot(4, antennaPaintId, 0)
def LoadoutPaintAddHatPaintId(builder, hatPaintId): builder.PrependInt32Slot(5, hatPaintId, 0)
def LoadoutPaintAddTrailsPaintId(builder, trailsPaintId): builder.PrependInt32Slot(6, trailsPaintId, 0)
def LoadoutPaintAddGoalExplosionPaintId(builder, goalExplosionPaintId): builder.PrependInt32Slot(7, goalExplosionPaintId, 0)
def LoadoutPaintEnd(builder): return builder.EndObject()
